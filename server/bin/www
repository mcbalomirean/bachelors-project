#!/usr/bin/env node

/**
 * Module dependencies.
 */

require("dotenv").config();
var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");
var https = require("https");
var fs = require("fs");

/**
 * Get port from environment and store in Express.
 */

var httpPort = normalizePort(process.env.HTTP_PORT || "3000");
app.set("httpPort", httpPort);

var httpsPort = normalizePort(process.env.HTTPS_PORT || "3001");
app.set("httpsPort", httpsPort);

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);

/**
 * Create HTTPS server.
 */

var credentials = {
  key: fs.readFileSync("server.key"),
  cert: fs.readFileSync("server.cert"),
};

var httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);
httpServer.on("error", onErrorHTTP);
httpServer.on("listening", onListeningHTTP);

httpsServer.listen(httpsPort);
httpsServer.on("error", onErrorHTTPS);
httpsServer.on("listening", onListeningHTTPS);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onErrorHTTP(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind =
    typeof httpPort === "string" ? "Pipe " + httpPort : "Port " + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onErrorHTTPS(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind =
    typeof httpsPort === "string" ? "Pipe " + httpPort : "Port " + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningHTTP() {
  var addr = httpServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onListeningHTTPS() {
  var addr = httpsServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
